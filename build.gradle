import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser

// https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html#usage
// update gradle version
// ./gradlew wrapper --gradle-version=VERSION
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.vladsch.flexmark:flexmark:0.64.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    // When targeting 2022.3+ IDE releases, using Gradle IntelliJ Plugin version 1.10.0 or higher is required.
    id 'org.jetbrains.intellij' version '1.10.1'
}

group = 'space.wintersea.intellij'

// If targeting 2022.3+, Java 17 is required instead.
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    ['annotationProcessor', 'compileOnly', 'testAnnotationProcessor', 'testCompileOnly']
            .each { conf -> add(conf, 'org.projectlombok:lombok:1.18.22') }

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.miguelfonseca.completely:completely-core:0.9.0'

    testImplementation platform('org.junit:junit-bom:5.8.2'),
            'org.junit.jupiter:junit-jupiter',
            'org.junit.jupiter:junit-jupiter-api',
            'org.mockito:mockito-core:4.3.1'
}

clean.doFirst {
    delete 'build', 'out'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
// https://www.jetbrains.com/intellij-repository/releases/?_ga=2.207512027.978002003.1670814090-1684912644.1661761560&_gl=1*13h4vl6*_ga*MTY4NDkxMjY0NC4xNjYxNzYxNTYw*_ga_9J976DJZ68*MTY3MDgyOTc1Ny4xMy4xLjE2NzA4MzA3NzkuMC4wLjA.
// https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html#intellij-platform-based-products-of-recent-ide-versions
intellij {
    // IC: IntelliJ IDEA Community Edition
    type.set('IC')
    version.set('2022.3')
    downloadSources.set(true)
    pluginName.set(project.name)
    plugins.set(['java', 'properties', 'yaml', 'maven', 'gradle'])
    updateSinceUntilBuild.set(true)
}

publishPlugin {
    token.set(System.getenv('JETBRAINS_PLUGIN_TOKEN'))
    channels.set(['eap', 'nightly', 'default'])
}

patchPluginXml {
    // https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html#intellij-platform-based-products-of-recent-ide-versions
    sinceBuild.set('221')
    pluginDescription.set(provider { readmeXmlAsHtml() })
    changeNotes.set(provider { changeLogAsHtml() })
}

wrapper() {
    gradleVersion = '7.3'
    distributionUrl = distributionUrl.replace('bin', 'all')
}

String readmeXmlAsHtml() {
    final String readmeContent = new File(rootProject.uri('README.md')).text
    // since these images needs to shown from within intellij, lest put absolute urls so that the images & changelog will be visible
            .replaceAll("help\\.gif", "https://raw.githubusercontent.com/winterhe/intellij-spring-assistant/${version}/help.gif")
            .replaceAll("CHANGELOG.md", "https://github.com/winterhe/intellij-spring-assistant/blob/${version}/CHANGELOG.md")

    final var readmeDocument = Parser.builder().build().parse(readmeContent)
    HtmlRenderer.builder().build().render(readmeDocument)
}

String changeLogAsHtml() {
    var parser = Parser.builder().build()
    var renderer = HtmlRenderer.builder().build()
    var changeLogDocument = parser.parse(file(rootProject.uri('CHANGELOG.md')).text)
    renderer.render(changeLogDocument)
}
